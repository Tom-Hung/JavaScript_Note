// 為何需要模組化 => 先看看沒有模組化的開發遇到什麼問題 ?
// --------------------------------------------------------------------------
// 1. 所有功能寫在一支 js 檔案行數太多難以管理 => 所以可以依據功能拆分成主 js 檔與功能 js 檔
// 2. 主 js 檔包含了功能 js 檔的變數 => 這些變數暴露在全域中相互汙染
// 3. js 檔案間若有依賴的需求 => 需要特別注意 html 中的 script 載入順序，一旦依賴太多順序管理不方便
// --------------------------------------------------------------------------
// 解法 1 :立即執行函式，運用獨立的執行環境，可以有效解決變數暴露在全域中汙染問題
// 1. js 檔相互依賴時，載入順序的問題依然沒有解決
// --------------------------------------------------------------------------
// 解法 2 : CommonJS 規範
// 1. 應用 module.exports / require 寫法後，只需要在 html 保留一支主要的 js 檔即可，自然也不會有載入順序問題
// 2. 但是 ! module.exports / require 只能在 Node.js 環境中被執行，也就是在瀏覽器執行的 js 檔並不支援
// ※ Webpack 模組打包工具將我們的模組翻譯成瀏覽器支援的寫法，並且打包成一個壓縮過的 JS 檔
// --------------------------------------------------------------------------
// 解法 3 : ES6 module 規範
// 1. 前端專案中常見的是 import / export，且瀏覽器讀得懂，那還需要 Webpack 嗎 ? 還需要因為 :
//    - 當使用第三方套件時，我們會使用 npm 工具管理它，而這些套件可能會採用 module.exports 寫法，若採用 import
//      當然無法載入，因此我們需要 Webpack 工具
// --------------------------------------------------------------------------
// ※ Webpack 主要是模組打包工具但不限於 js 檔，包含圖片、CSS ...等。

// var result = add(1, 1);

// console.log(a);
// console.log(result);

// var resultA = module01.add(1, 0);
// var resultB = module02.add(1, 0);

// console.log(resultA);
// console.log(resultB);

import a from "./index01.js";

console.log(a);
